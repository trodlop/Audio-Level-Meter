const decibels = document.getElementById("decibels");

const connect = document.getElementById("connect");
const play = document.getElementById("play");
const pause = document.getElementById("pause");

let Play = false

// -------------------------------------------------------------------------------------------
var ctx = document.getElementById('myChart').getContext('2d');
Chart.defaults.animation = false;

const canvas = document.getElementById('myChart');

var myChart = new Chart(ctx, {
    type: 'line',  // Change this to any type you want, e.g., 'bar', 'scatter', etc.
    data: {
        labels: [
            0, 43, 86, 129, 172, 215, 258, 301, 344, 387, 430, 473, 516, 559, 602, 645, 689, 732, 775, 818, 861, 904, 947, 990, 1033, 1076, 1119, 1162, 1205, 1248, 1291, 1335, 1378, 1421, 1464, 1507, 1550, 1593, 1636, 1679, 1722, 1765, 1808, 1851, 1894, 1937, 1981, 2024, 2067, 2110, 2153, 2196, 2239, 2282, 2325, 2368, 2411, 2454, 2497, 2540, 2583, 2627, 2670, 2713, 2756, 2799, 2842, 2885, 2928, 2971, 3014, 3057, 3100, 3143, 3186, 3229, 3273, 3316, 3359, 3402, 3445, 3488, 3531, 3574, 3617, 3660, 3703, 3746, 3789, 3832, 3875, 3919, 3962, 4005, 4048, 4091, 4134, 4177, 4220, 4263, 4306, 4349, 4392, 4435, 4478, 4521, 4565, 4608, 4651, 4694, 4737, 4780, 4823, 4866, 4909, 4952, 4995, 5038, 5081, 5124, 5167, 5211, 5254, 5297, 5340, 5383, 5426, 5469, 5512, 5555, 5598, 5641, 5684, 5727, 5770, 5813, 5857, 5900, 5943, 5986, 6029, 6072, 6115, 6158, 6201, 6244, 6287, 6330, 6373, 6416, 6459, 6503, 6546, 6589, 6632, 6675, 6718, 6761, 6804, 6847, 6890, 6933, 6976, 7019, 7062, 7105, 7149, 7192, 7235, 7278, 7321, 7364, 7407, 7450, 7493, 7536, 7579, 7622, 7665, 7708, 7751, 7795, 7838, 7881, 7924, 7967, 8010, 8053, 8096, 8139, 8182, 8225, 8268, 8311, 8354, 8397, 8441, 8484, 8527, 8570, 8613, 8656, 8699, 8742, 8785, 8828, 8871, 8914, 8957, 9000, 9043, 9087, 9130, 9173, 9216, 9259, 9302, 9345, 9388, 9431, 9474, 9517, 9560, 9603, 9646, 9689, 9733, 9776, 9819, 9862, 9905, 9948, 9991, 10034, 10077, 10120, 10163, 10206, 10249, 10292, 10335, 10379, 10422, 10465, 10508, 10551, 10594, 10637, 10680, 10723, 10766, 10809, 10852, 10895, 10938, 10981, 11025, 11068, 11111, 11154, 11197, 11240, 11283, 11326, 11369, 11412, 11455, 11498, 11541, 11584, 11627, 11670, 11714, 11757, 11800, 11843, 11886, 11929, 11972, 12015, 12058, 12101, 12144, 12187, 12230, 12273, 12316, 12360, 12403, 12446, 12489, 12532, 12575, 12618, 12661, 12704, 12747, 12790, 12833, 12876, 12919, 12962, 13006, 13049, 13092, 13135, 13178, 13221, 13264, 13307, 13350, 13393, 13436, 13479, 13522, 13565, 13608, 13652, 13695, 13738, 13781, 13824, 13867, 13910, 13953, 13996, 14039, 14082, 14125, 14168, 14211, 14254, 14298, 14341, 14384, 14427, 14470, 14513, 14556, 14599, 14642, 14685, 14728, 14771, 14814, 14857, 14900, 14944, 14987, 15030, 15073, 15116, 15159, 15202, 15245, 15288, 15331, 15374, 15417, 15460, 15503, 15546, 15590, 15633, 15676, 15719, 15762, 15805, 15848, 15891, 15934, 15977, 16020, 16063, 16106, 16149, 16192, 16236, 16279, 16322, 16365, 16408, 16451, 16494, 16537, 16580, 16623, 16666, 16709, 16752, 16795, 16838, 16882, 16925, 16968, 17011, 17054, 17097, 17140, 17183, 17226, 17269, 17312, 17355, 17398, 17441, 17484, 17528, 17571, 17614, 17657, 17700, 17743, 17786, 17829, 17872, 17915, 17958, 18001, 18044, 18087, 18130, 18174, 18217, 18260, 18303, 18346, 18389, 18432, 18475, 18518, 18561, 18604, 18647, 18690, 18733, 18776, 18820, 18863, 18906, 18949, 18992, 19035, 19078, 19121, 19164, 19207, 19250, 19293, 19336, 19379, 19422, 19466, 19509, 19552, 19595, 19638, 19681, 19724, 19767, 19810, 19853, 19896, 19939, 19982, 20025, 20068, 20112, 20155, 20198, 20241, 20284, 20327, 20370, 20413, 20456, 20499, 20542, 20585, 20628, 20671, 20714, 20758, 20801, 20844, 20887, 20930, 20973, 21016, 21059, 21102, 21145, 21188, 21231, 21274, 21317, 21360, 21404, 21447, 21490, 21533, 21576, 21619, 21662, 21705, 21748, 21791, 21834, 21877, 21920, 21963, 22006
        ], // List of frequency bins
        datasets: [{
            label: 'Data Points',
            data: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ], // Decibel values for each frequency bin
            backgroundColor: 'rgba(255, 255, 255, 0)',
            borderColor: '#008EFF',
            borderWidth: 2, // Make the line thicker
            pointRadius: 0, // Remove the circle markers
            fill: true
        }]
    },
    options: {
        maintainAspectRatio: false, // Allow the aspect ratio to be overridden
        plugins: {
            tooltip: {
                enabled: false // Disable tooltips
            },
            legend: {
                display: false,
            },
        },
        scales: {
            x: {
                type: 'logarithmic', // Set the x-axis to logarithmic
                position: 'bottom',
                ticks: {
                    callback: function(value, index, values) {

                        const customLabels = {
                            100: '100',
                            500: '500',
                            1000: '1k',
                            2000: '2k',
                            4000: '4k',
                            8000: '8k',
                            15000: '15k'
                        };

                        return customLabels[value] || '';

                        //! NOTE: 16k label is at 15khz so needs to shift right
                    },

                },
                min: 100, // Set the minimum value for the x-axis
                max: 22050, // Set the maximum value for the x-axis
                grid: {
                    color: 'rgba(0, 0, 0, 0.3)', // Adjust the color and opacity
                    borderColor: '#333',
                    borderWidth: 1,
                    lineWidth: 1
                },
                title: {
                    display: false,
                }
            },
            y: {
                min: -40,    // Minimum value of the Y-axis
                max: 120,    // Maximum value of the Y-axis
                grid: {
                    color: 'rgba(0, 0, 0, 0.5)', // Adjust the color and opacity
                    borderColor: '#333',
                    borderWidth: 1,
                    lineWidth: 2
                },
                title: {
                    display: false,
                }
            }
        }
    }
});
// -------------------------------------------------------------------------------------------







let frequencyData;
let Decibels;
let mediaStream;

const audioContext = new (window.AudioContext || window.AudioContext)();
const analyser = audioContext.createAnalyser();

analyser.fftSize = 1024;
analyser.smoothingTimeConstant = 0.25; // or a value closer to 0 for less smoothing

function connect_microphone() {
    navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
            mediaStream = stream; // Assign the stream to mediaStream

            // Connect the stream to the audio context
            const source = audioContext.createMediaStreamSource(stream);
            source.connect(analyser);

            // Create a Float32Array to hold the frequency data
            const bufferLength = analyser.frequencyBinCount;
            frequencyData = new Float32Array(bufferLength);

            let captureInterval; // To store the interval ID

            // Function to capture audio data at a particular point in time
            function captureAudioData() {
                // Get the frequency data from the analyser
                analyser.getFloatFrequencyData(frequencyData);

                // Adjust the data
                Decibels = frequencyData.map(value => value + 110);

                update_decibels();
                update_graph();
                
            };

            console.log("Successfully connected to microphone");     

            function Play() {
                // Start the interval and store the interval ID
                if (!captureInterval) { // Only set a new interval if one is not already running
                    captureInterval = setInterval(captureAudioData, 100);
                }
            }
            
            function Pause() {
                // Clear the interval using the stored interval ID
                if (captureInterval) {
                    clearInterval(captureInterval);
                    captureInterval = null; // Reset the interval ID
                }
            }

            play.addEventListener("click",Play)
            pause.addEventListener("click",Pause)

        })

        .catch(err => {
            console.error("Error accessing the microphone: ", err);
        });

    if (audioContext.state === 'suspended') {
        audioContext.resume();
    }
};

connect.addEventListener("click", connect_microphone);













// array to store all different frequency intervals (bins) (in Hz)
var frequency_bins = [
    0, 43, 86, 129, 172, 215, 258, 301, 344, 387, 430, 473, 516, 559, 602, 645, 689, 732, 775, 818, 861, 904, 947, 990, 1033, 1076, 1119, 1162, 1205, 1248, 1291, 1335, 1378, 1421, 1464, 1507, 1550, 1593, 1636, 1679, 1722, 1765, 1808, 1851, 1894, 1937, 1981, 2024, 2067, 2110, 2153, 2196, 2239, 2282, 2325, 2368, 2411, 2454, 2497, 2540, 2583, 2627, 2670, 2713, 2756, 2799, 2842, 2885, 2928, 2971, 3014, 3057, 3100, 3143, 3186, 3229, 3273, 3316, 3359, 3402, 3445, 3488, 3531, 3574, 3617, 3660, 3703, 3746, 3789, 3832, 3875, 3919, 3962, 4005, 4048, 4091, 4134, 4177, 4220, 4263, 4306, 4349, 4392, 4435, 4478, 4521, 4565, 4608, 4651, 4694, 4737, 4780, 4823, 4866, 4909, 4952, 4995, 5038, 5081, 5124, 5167, 5211, 5254, 5297, 5340, 5383, 5426, 5469, 5512, 5555, 5598, 5641, 5684, 5727, 5770, 5813, 5857, 5900, 5943, 5986, 6029, 6072, 6115, 6158, 6201, 6244, 6287, 6330, 6373, 6416, 6459, 6503, 6546, 6589, 6632, 6675, 6718, 6761, 6804, 6847, 6890, 6933, 6976, 7019, 7062, 7105, 7149, 7192, 7235, 7278, 7321, 7364, 7407, 7450, 7493, 7536, 7579, 7622, 7665, 7708, 7751, 7795, 7838, 7881, 7924, 7967, 8010, 8053, 8096, 8139, 8182, 8225, 8268, 8311, 8354, 8397, 8441, 8484, 8527, 8570, 8613, 8656, 8699, 8742, 8785, 8828, 8871, 8914, 8957, 9000, 9043, 9087, 9130, 9173, 9216, 9259, 9302, 9345, 9388, 9431, 9474, 9517, 9560, 9603, 9646, 9689, 9733, 9776, 9819, 9862, 9905, 9948, 9991, 10034, 10077, 10120, 10163, 10206, 10249, 10292, 10335, 10379, 10422, 10465, 10508, 10551, 10594, 10637, 10680, 10723, 10766, 10809, 10852, 10895, 10938, 10981, 11025, 11068, 11111, 11154, 11197, 11240, 11283, 11326, 11369, 11412, 11455, 11498, 11541, 11584, 11627, 11670, 11714, 11757, 11800, 11843, 11886, 11929, 11972, 12015, 12058, 12101, 12144, 12187, 12230, 12273, 12316, 12360, 12403, 12446, 12489, 12532, 12575, 12618, 12661, 12704, 12747, 12790, 12833, 12876, 12919, 12962, 13006, 13049, 13092, 13135, 13178, 13221, 13264, 13307, 13350, 13393, 13436, 13479, 13522, 13565, 13608, 13652, 13695, 13738, 13781, 13824, 13867, 13910, 13953, 13996, 14039, 14082, 14125, 14168, 14211, 14254, 14298, 14341, 14384, 14427, 14470, 14513, 14556, 14599, 14642, 14685, 14728, 14771, 14814, 14857, 14900, 14944, 14987, 15030, 15073, 15116, 15159, 15202, 15245, 15288, 15331, 15374, 15417, 15460, 15503, 15546, 15590, 15633, 15676, 15719, 15762, 15805, 15848, 15891, 15934, 15977, 16020, 16063, 16106, 16149, 16192, 16236, 16279, 16322, 16365, 16408, 16451, 16494, 16537, 16580, 16623, 16666, 16709, 16752, 16795, 16838, 16882, 16925, 16968, 17011, 17054, 17097, 17140, 17183, 17226, 17269, 17312, 17355, 17398, 17441, 17484, 17528, 17571, 17614, 17657, 17700, 17743, 17786, 17829, 17872, 17915, 17958, 18001, 18044, 18087, 18130, 18174, 18217, 18260, 18303, 18346, 18389, 18432, 18475, 18518, 18561, 18604, 18647, 18690, 18733, 18776, 18820, 18863, 18906, 18949, 18992, 19035, 19078, 19121, 19164, 19207, 19250, 19293, 19336, 19379, 19422, 19466, 19509, 19552, 19595, 19638, 19681, 19724, 19767, 19810, 19853, 19896, 19939, 19982, 20025, 20068, 20112, 20155, 20198, 20241, 20284, 20327, 20370, 20413, 20456, 20499, 20542, 20585, 20628, 20671, 20714, 20758, 20801, 20844, 20887, 20930, 20973, 21016, 21059, 21102, 21145, 21188, 21231, 21274, 21317, 21360, 21404, 21447, 21490, 21533, 21576, 21619, 21662, 21705, 21748, 21791, 21834, 21877, 21920, 21963, 22006
];

function update_graph() {

    myChart.data.datasets[0].data = Decibels
    myChart.update(); // Redraw the chart with updated data

};

function update_decibels() {

    let num = Math.max.apply(Math, Decibels); // Finds the highest value in the Decibels array
    num = parseFloat(num); // Makes sure to return a number
    num = num.toFixed(1); // Returns float to 1 decimal place
    decibels.innerText = num;

};
