const decibels_display = document.getElementById("decibels");
const max_display = document.getElementById("max_display");
const avg_display = document.getElementById("avg_display");
const calibration_display = document.getElementById("calibration");

const visualiser_container = document.getElementById("visualiser_container");
const spectrogram_axis = document.getElementById("spectrogram_x_axis");

// Initialises all of the settings information in local storage:
function initialise_settings() {
    if (localStorage.getItem("display_type") === null) {
        localStorage.setItem("display_type","max"); // max, mean
    };
    if (localStorage.getItem("weighting") === null) {
        localStorage.setItem("weighting","a"); // itu r, a, c, z
    };
    if (localStorage.getItem("visualiser_type") === null) {
        localStorage.setItem("visualiser_type","intensity spectrum"); // intensity spectrum, spectrogram, waveform, softmax
    };
    if (localStorage.getItem("time_interval") === null) {
        localStorage.setItem("time_interval",100); // 500, 200, 100
    };
    if (localStorage.getItem("intensity_spectrum_colour") === null) {
        localStorage.setItem("intensity_spectrum_colour","#008EFF"); // "#008EFF" = cyan
    };
    if (localStorage.getItem("intensity_spectrum_axis") === null) {
        localStorage.setItem("intensity_spectrum_axis","logarithmic"); // logarithmic, linear
    };
    if (localStorage.getItem("spectrogram_colour") === null) {
        localStorage.setItem("spectrogram_colour","blue-red-white"); // blue-red-white, purple-orange, red-blue-green, red-green, black-white
    };
    if (localStorage.getItem("spectrogram_refresh") === null) {
        localStorage.setItem("spectrogram_refresh",5); // 3, 5, 10
    };
    if (localStorage.getItem("waveform_colour") === null) {
        localStorage.setItem("waveform_colour","#008EFF"); // "#008EFF" = cyan
    };
    if (localStorage.getItem("softmax_axis") === null) {
        localStorage.setItem("softmax_axis","linear"); // logarithmic, linear
    };
    if (localStorage.getItem("softmax_colour") === null) {
        localStorage.setItem("softmax_colour","#008EFF"); // "#008EFF" = cyan
    };
    if (localStorage.getItem("data_smoothing") === null) {
        localStorage.setItem("data_smoothing","raw"); // raw, savitzky-golay
    };
    if (localStorage.getItem("download_type") === null) {
        localStorage.setItem("download_type","simple"); // simple, full
    };
    console.log("Settings initialised");
};
initialise_settings();

let simple_save_data = []; // Array for storing max, avg, runtime data for download
let full_save_data = []; // Array for storing Decibels array data for download
let runtime = 0; // Keeps track of runtime 

let array; // Array for temporary use case
let Data; // Array storing frequency data directly from AudioAPI
let Decibels = []; // Array for storing frequency intensity (calculated from frequencyData array)
let Amplitudes = []; // Array for storing amplitudes (calculated from floatTimeDomainData)
let normalized_data_array = []; // Array for storing normalised frequency intensity
let mediaStream = null; // Object to handle incoming audio data from microphone
let capture_interval_id = null; // To store the interval ID

const display_type = localStorage.getItem("display_type"); // "mean" = mean average intensity, "trimmed mean" = mean average while eliminating any outlying intensities, "max" = maximum value
let average = 0; // Mean average to be used for VU meter reading
let maximum = 0; // Maximum value of recorded sound levels
let minimum = 0; // Minimum value of maximum recorded sound levels
let maximum_sum = 0; // Keeps sum of recorded audio level values (numerator for maximum average)
let maximum_counter = 0; // Counts number of recorded audio level values (divisor for maximum average)
let calibration = 0; // Default calibration
const w = localStorage.getItem("weighting"); // "a" = A Weighting, "itu r" = ITU R 468 Weighting, "z" = Z (zero) Weighting
const smoothing = localStorage.getItem("data_smoothing"); // "raw" = no smoothing, "savitzky-golay" = savitzky-golay filter

const refresh_interval = localStorage.getItem("time_interval");
const spectrogram_refresh = localStorage.getItem("spectrogram_refresh");
const spectrogram_colour = localStorage.getItem("spectrogram_colour");

document.getElementById('refresh').addEventListener('click', function() {
    location.reload();
});

const connect = document.getElementById("connect");
const play = document.getElementById("play");
const play_pause = document.getElementById("play_pause");

const calibrate_up = document.getElementById("calibrate_up");
const calibrate_down = document.getElementById("calibrate_down");

// Array to store all different frequency intervals (bins) (in Hz)
const frequency_bins = [
    0, 43, 86, 129, 172, 215, 258, 301, 344, 387, 430, 473, 516, 559, 602, 645, 689, 732, 775, 818, 861, 904, 947, 990, 1033, 1076, 1119, 1162, 1205, 1248, 1291, 1335, 1378, 1421, 1464, 1507, 1550, 1593, 1636, 1679, 1722, 1765, 1808, 1851, 1894, 1937, 1981, 2024, 2067, 2110, 2153, 2196, 2239, 2282, 2325, 2368, 2411, 2454, 2497, 2540, 2583, 2627, 2670, 2713, 2756, 2799, 2842, 2885, 2928, 2971, 3014, 3057, 3100, 3143, 3186, 3229, 3273, 3316, 3359, 3402, 3445, 3488, 3531, 3574, 3617, 3660, 3703, 3746, 3789, 3832, 3875, 3919, 3962, 4005, 4048, 4091, 4134, 4177, 4220, 4263, 4306, 4349, 4392, 4435, 4478, 4521, 4565, 4608, 4651, 4694, 4737, 4780, 4823, 4866, 4909, 4952, 4995, 5038, 5081, 5124, 5167, 5211, 5254, 5297, 5340, 5383, 5426, 5469, 5512, 5555, 5598, 5641, 5684, 5727, 5770, 5813, 5857, 5900, 5943, 5986, 6029, 6072, 6115, 6158, 6201, 6244, 6287, 6330, 6373, 6416, 6459, 6503, 6546, 6589, 6632, 6675, 6718, 6761, 6804, 6847, 6890, 6933, 6976, 7019, 7062, 7105, 7149, 7192, 7235, 7278, 7321, 7364, 7407, 7450, 7493, 7536, 7579, 7622, 7665, 7708, 7751, 7795, 7838, 7881, 7924, 7967, 8010, 8053, 8096, 8139, 8182, 8225, 8268, 8311, 8354, 8397, 8441, 8484, 8527, 8570, 8613, 8656, 8699, 8742, 8785, 8828, 8871, 8914, 8957, 9000, 9043, 9087, 9130, 9173, 9216, 9259, 9302, 9345, 9388, 9431, 9474, 9517, 9560, 9603, 9646, 9689, 9733, 9776, 9819, 9862, 9905, 9948, 9991, 10034, 10077, 10120, 10163, 10206, 10249, 10292, 10335, 10379, 10422, 10465, 10508, 10551, 10594, 10637, 10680, 10723, 10766, 10809, 10852, 10895, 10938, 10981, 11025, 11068, 11111, 11154, 11197, 11240, 11283, 11326, 11369, 11412, 11455, 11498, 11541, 11584, 11627, 11670, 11714, 11757, 11800, 11843, 11886, 11929, 11972, 12015, 12058, 12101, 12144, 12187, 12230, 12273, 12316, 12360, 12403, 12446, 12489, 12532, 12575, 12618, 12661, 12704, 12747, 12790, 12833, 12876, 12919, 12962, 13006, 13049, 13092, 13135, 13178, 13221, 13264, 13307, 13350, 13393, 13436, 13479, 13522, 13565, 13608, 13652, 13695, 13738, 13781, 13824, 13867, 13910, 13953, 13996, 14039, 14082, 14125, 14168, 14211, 14254, 14298, 14341, 14384, 14427, 14470, 14513, 14556, 14599, 14642, 14685, 14728, 14771, 14814, 14857, 14900, 14944, 14987, 15030, 15073, 15116, 15159, 15202, 15245, 15288, 15331, 15374, 15417, 15460, 15503, 15546, 15590, 15633, 15676, 15719, 15762, 15805, 15848, 15891, 15934, 15977, 16020, 16063, 16106, 16149, 16192, 16236, 16279, 16322, 16365, 16408, 16451, 16494, 16537, 16580, 16623, 16666, 16709, 16752, 16795, 16838, 16882, 16925, 16968, 17011, 17054, 17097, 17140, 17183, 17226, 17269, 17312, 17355, 17398, 17441, 17484, 17528, 17571, 17614, 17657, 17700, 17743, 17786, 17829, 17872, 17915, 17958, 18001, 18044, 18087, 18130, 18174, 18217, 18260, 18303, 18346, 18389, 18432, 18475, 18518, 18561, 18604, 18647, 18690, 18733, 18776, 18820, 18863, 18906, 18949, 18992, 19035, 19078, 19121, 19164, 19207, 19250, 19293, 19336, 19379, 19422, 19466, 19509, 19552, 19595, 19638, 19681, 19724, 19767, 19810, 19853, 19896, 19939, 19982, 20025, 20068, 20112, 20155, 20198, 20241, 20284, 20327, 20370, 20413, 20456, 20499, 20542, 20585, 20628, 20671, 20714, 20758, 20801, 20844, 20887, 20930, 20973, 21016, 21059, 21102, 21145, 21188, 21231, 21274, 21317, 21360, 21404, 21447, 21490, 21533, 21576, 21619, 21662, 21705, 21748, 21791, 21834, 21877, 21920, 21963, 22006
];

// Array to store weightings for each frequency interval (+- dB)
const A_weight = [
    -33.11733949201692, -21.310094335420928, -15.795488041062441, -12.441235092670885, -10.119467008644047, -8.38516766126854, -7.026143970436314, -5.926973068446808, -5.018319014029341, -4.255213965648703, -3.6067011079765834, -3.050453051102779, -2.569769670315864, -2.15179937680466, -1.7864289969281186, -1.4585708252413272, -1.1764352922236414, -0.926702129487829, -0.7049085056965092, -0.5073241070190706, -0.330810174917584, -0.17271044506512112, -0.030765493434925517, 0.09695538169896656, 0.2121089036824415, 0.31612220508952227, 0.41022909170072897, 0.4954998640720314, 0.5728659821577178, 0.6431405688712162, 0.7084507262541138, 0.7664641099890792, 0.8192852052319659, 0.8673983535347383, 0.911232186615679, 0.951166962356637, 0.9875408231789238, 1.020655150654402, 1.0507791596892972, 1.0781538509055657, 1.102995419740142, 1.1254982043567483, 1.1458372409929884, 1.1641704842756162, 1.1806407408771555, 1.195700405550039, 1.2087844649506343, 1.2203612829850372, 1.2305277702652488, 1.239372307083789, 1.2469756233161922, 1.2534115759264775, 1.2587478372691534, 1.2630465055261082, 1.2663646470433196, 1.268754778994231, 1.2702652996569022, 1.2709408726187248, 1.2708227703897095, 1.2699491821914657, 1.268310127566131, 1.2660135425937593, 1.263060846580753, 1.2594803443777502, 1.255298391489739, 1.2505395576182052, 1.2452267746121932, 1.2393814704859263, 1.233023690966806, 1.2261722098685133, 1.2188446294359416, 1.2110574716792137, 1.2028262616003564, 1.1941656031164314, 1.1850892483951034, 1.1753850250462565, 1.1655064975626908, 1.1552492884222043, 1.1446243113022487, 1.1336418971127349, 1.122311835005477, 1.1106434100860483, 1.0986454381244752, 1.0863262975316594, 1.073693958842248, 1.0607560119212616, 1.0475196910908358, 1.033991898354687, 1.0201792248812072, 1.0060879708909858, 0.9913869259411023, 0.9767502010948828, 0.9618523542793476, 0.9466986882090302, 0.9312942946918858, 0.9156440673158208, 0.8997527132509804, 0.8836247642364838, 0.8672645868143594, 0.8506763918680731, 0.8338642435182904, 0.8168320674239746, 0.79958365853306, 0.7821226883232528, 0.7644527115701563, 0.7461590436246568, 0.7280766186395498, 0.7097952867562771, 0.6913181931931929, 0.6726483944346267, 0.6537888627874757, 0.6347424906553991, 0.6155120945499757, 0.5961004188567078, 0.5765101393723757, 0.5567438666291151, 0.5368041490193525, 0.5166934757347534, 0.49641427953138995, 0.47596893933240025, 0.45487856920162795, 0.43410414459242164, 0.4131704649198904, 0.392079715885262, 0.3708340403192092, 0.3494355400035205, 0.3278862773901541, 0.30618827722403474, 0.2843435280754716, 0.2623539837877271, 0.24022156484488555, 0.2179481596648094, 0.19553562582169381, 0.172985791202398, 0.15030045510050583, 0.12694913619690618, 0.10399503690730327, 0.08091071222845181, 0.057697856333404296, 0.03435813947744304, 0.010893208786924902, -0.012695310992796305, -0.03640581678802457, -0.060236726523746675, -0.08418647848501948, -0.10825353071072463, -0.13243636041792417, -0.15673346345510542, -0.18114335378265345, -0.20566456297913716, -0.230869751207591, -0.25561176578702405, -0.28046076230664596, -0.3054153387119123, -0.33047410842842906, -0.3556356999960464, -0.38089875672029727, -0.4062619363402784, -0.4317239107120283, -0.45728336550662796, -0.4829389999221969, -0.5086895264090545, -0.5345336704073516, -0.5604701700964676, -0.586497776155634, -0.6132236941243603, -0.6394318608423246, -0.6657274306545435, -0.6921092023171571, -0.7185759860325716, -0.7451266032658506, -0.7717598865687467, -0.7984746794109192, -0.8252698360180544, -0.8521442212164083, -0.8790967102835263, -0.9061261888047984, -0.933231552535478, -0.9604117072679799, -0.9876655687041023, -1.0156284178214654, -1.0430281305607325, -1.0704983309276224, -1.0980379732922927, -1.1256460213586217, -1.15332144806125, -1.1810632354659756, -1.2088703746733809, -1.2367418657255005, -1.2646767175153704, -1.2926739476993143, -1.3207325826118135, -1.3488516571828422, -1.3770302148575029, -1.4052673075178848, -1.4342206892003864, -1.462573347593013, -1.4909817251147572, -1.519444906842788, -1.5479619859280809, -1.5765320635282603, -1.6051542487419685, -1.6338276585446287, -1.662551417725581, -1.6913246588264736, -1.7201465220808854, -1.7490161553550654, -1.7779327140897823, -1.8068953612431837, -1.835903267234631, -1.8656317679340924, -1.8947287372542667, -1.923868502196497, -1.9530502626489312, -1.9822732256917877, -2.0115366055460413, -2.0408396235227997, -2.0701815079732775, -2.0995614942393956, -2.12897882460493, -2.158432748247212, -2.1879225211893276, -2.2174474062528047, -2.247006673010759, -2.2765995977414786, -2.306914823229725, -2.336573660477204, -2.366264008013804, -2.395985168633553, -2.4257364516083904, -2.45551717264396, -2.4853266538357497, -2.5151642236254794, -2.5450292167578104, -2.5749209742372976, -2.6048388432856306, -2.6347821772991056, -2.664750335806338, -2.694742684426217, -2.72475859482606, -2.755496290567044, -2.785557975370353, -2.8156413587050633, -2.8457458361544585, -2.8758708091432394, -2.906015684896884, -2.9361798764011713, -2.9663628023619175, -2.996563887164834, -3.026782560835591, -3.0570182590000137, -3.0872704228444583, -3.11753849907633, -3.147821939884764, -3.178120202901458, -3.2091378598386306, -3.2394644753120643, -3.2698043059788766, -3.300156830974788, -3.3305215346835464, -3.3608979066986624, -3.3912854417852394, -3.4216836398419854, -3.4520920058633395, -3.482510049901772, -3.5129372870301925, -3.5433732373045066, -3.573817425726344, -3.604269382205871, -3.6347286415248217, -3.6651947432995877, -3.696375966837296, -3.726854524249636, -3.7573385612900374, -3.7878276366563943, -3.818321313698248, -3.8488191603807866, -3.879320749248997, -3.9098256573919627, -3.9403334664072984, -3.9708437623657575, -4.0013561357759535, -4.031870181549283, -4.062385498964953, -4.092901691635186, -4.123418367470583, -4.154644829046518, -4.185161300731174, -4.215677095985271, -4.246191839665932, -4.276705160756979, -4.3072166923352535, -4.337726071537065, -4.3682329395248285, -4.398736941453842, -4.429237726439254, -4.459734947523171, -4.4902282616419456, -4.520717329593625, -4.5512018160055625, -4.5816813893022115, -4.612864362111002, -4.643332996233873, -4.673795737570964, -4.704252269501327, -4.734702279041858, -4.7651454568161, -4.795581497023249, -4.826010097407293, -4.856430959226372, -4.886843787222262, -4.917248289590083, -4.947644177948147, -4.978031167307993, -5.008408976044629, -5.038777325866889, -5.069841838107954, -5.100190212520917, -5.130528306650694, -5.160855855323474, -5.191172596553254, -5.221478271513325, -5.25177262450792, -5.282055402944031, -5.312326357303435, -5.342585241114873, -5.372831810926419, -5.403065826278042, -5.433287049674328, -5.463495246557395, -5.493690185279982, -5.524573369016489, -5.55474078641724, -5.584894262758805, -5.615033577835883, -5.645158514221359, -5.675268857240502, -5.705364394945304, -5.73544491808904, -5.76551022010096, -5.795560097061216, -5.825594347675928, -5.855612773252433, -5.885615177674728, -5.9156013673790815, -5.94557115132983, -5.976220727859543, -6.00615674475401, -6.036075793476206, -6.065977692920466, -6.0958622643902665, -6.125729331575068, -6.155578720527348, -6.185410259639795, -6.215223779622711, -6.245019113481529, -6.274796096494564, -6.3045545661908875, -6.334294362328421, -6.364015326872142, -6.393717303972524, -6.424090209487506, -6.4537533023348, -6.483396949639866, -6.513021004131197, -6.542625320616864, -6.57220975596395, -6.601774169078132, -6.631318420883433, -6.660842374302144, -6.690345894234909, -6.719828847540969, -6.749291103018548, -6.778732531385463, -6.808153005259815, -6.837552399140897, -6.867613549848368, -6.896969917296305, -6.926304836578806, -6.955618189573769, -6.984909859946665, -7.014179733132385, -7.043427696317224, -7.072653638421022, -7.101857450079464, -7.131039023626524, -7.160198253077068, -7.189335034109593, -7.218449264049129, -7.24754084185029, -7.276609668080454, -7.306330860091077, -7.335353356496498, -7.3643528103600975, -7.393329128570972, -7.4222822195487534, -7.451211993227679, -7.4801183610407875, -7.509001235904261, -7.537860532201931, -7.566696165769855, -7.595508053881115, -7.624296115230695, -7.6530602699205055, -7.681800439444563, -7.710516546674274, -7.739875483138627, -7.768542675875194, -7.797185581367167, -7.825804127881717, -7.854398244991554, -7.882967863561021, -7.911512915732306, -7.940033334911785, -7.968529055756475, -7.997000014160642, -8.025446147242512, -8.053867393331096, -8.082263691953157, -8.11063498382031, -8.138981210816185, -8.167960646978793, -8.196255988326492, -8.224526096101705, -8.252770916776544, -8.280990397932651, -8.309184488249109, -8.337353137490453, -8.365496296494818, -8.39361391716217, -8.421705952442672, -8.449772356325152, -8.47781308382567, -8.505828090976223, -8.53381733481352, -8.561780773367895, -8.590367769250511, -8.618278872774649, -8.646164050062294, -8.674023263031359, -8.70185647453921, -8.729663648372206, -8.75744474923531, -8.78519974274183, -8.812928595403248, -8.840631274619149, -8.86830774866722, -8.895957986693418, -8.92358195870215, -8.951179635546588, -8.97875098891911, -9.00693625904582, -9.034454270117545, -9.061945877143515, -9.089411055097305, -9.11684977974489, -9.144262027635605, -9.171647776093206, -9.199007003206972, -9.226339687822989, -9.253645809535398, -9.280925348677835, -9.308178286314902, -9.335404604233732, -9.362604284935635, -9.389777311627858, -9.417554661379175, -9.444673711685482, -9.471766061423512, -9.498831696558717, -9.525870603722172, -9.552882770202807, -9.57986818393967, -9.606826833514345, -9.633758708143372, -9.660663797670775, -9.687542092560681, -9.714393583889972, -9.741218263341056, -9.768016123194673, -9.794787156322801, -9.822152994997959, -9.848869731386207, -9.875559623023568, -9.902222665090356, -9.928858853323508, -9.955468184009884, -9.982050653979686, -10.008606260599867, -10.035135001767689, -10.061636875904288, -10.088111881948326, -10.114560019349717, -10.140981288063406, -10.167375688543196, -10.193743221735676, -10.220696143089015, -10.24700932177145, -10.27329563896416, -10.299555097535977, -10.32578770081885, -10.351993452602095, -10.378172357126736, -10.404324419079904, -10.430449643589274, -10.456548036217585, -10.482619602957188, -10.508664350224683, -10.534682284855572, -10.560673414099009, -10.586637745612583, -10.613178167419655
];

const ITUR_weight = [
    -27.220560908538065, -21.200833325925604, -17.680461132946792, -15.183718704459292, -13.248128189899507, -11.66768805620092, -10.332509172029226, -9.176995829274919, -8.158835729477506, -7.249136591069174, -6.427288974742375, -5.6780738802588075, -4.9899320834906895, -4.353876679716485, -3.7627817189939883, -3.1984935817369546, -2.6818786378666566, -2.1957970729179976, -1.7369963320439084, -1.3027225443515569, -0.8906231793869352, -0.49867235057532966, -0.12511272466112544, 0.23159020359830862, 0.5727845001734693, 0.8996610410026307, 1.2132772383249595, 1.514576449149633, 1.8044039749052736, 2.0835203456032794, 2.358756217382151, 2.618234825567866, 2.8688903157900505, 3.1112379810647486, 3.345749258446176, 3.5728566399569353, 3.7929579085263256, 4.006419806940759, 4.213581228191192, 4.414755999953833, 4.610235323380145, 4.800289916231343, 4.985171902158745, 5.165116481210738, 5.340343411133178, 5.514976323569046, 5.681273647423076, 5.843436486538563, 6.00163441483674, 6.156026907454752, 6.306764098549019, 6.4539874647368105, 6.597830442742028, 6.738418988691427, 6.875872085551826, 7.01030220438113, 7.141815724363756, 7.270513315996794, 7.396490291271508, 7.519836924243464, 7.643418469557689, 7.761700167608753, 7.877596678487741, 7.991180745821776, 8.10252133271583, 8.211683816825762, 8.318730171046635, 8.423719131163072, 8.526706351672976, 8.627744550876265, 8.726883646214036, 8.824170880749763, 8.919650941600347, 9.013366071050577, 9.105356171018006, 9.197739177167918, 9.286352039582953, 9.373347247428345, 9.458756227974995, 9.54260851203215, 9.624931809515692, 9.705752081683244, 9.785093610365404, 9.86297906449605, 9.93942956422055, 10.014464742838534, 10.088102806817256, 10.160360594092545, 10.231253630856383, 10.300796187013464, 10.370571681464678, 10.437420638908417, 10.502955164791702, 10.56718501364181, 10.630118947505293, 10.691764786394872, 10.752129458275306, 10.811219048659757, 10.869038849875789, 10.92559341004855, 10.980886581836655, 11.03492157094499, 11.087700984427084, 11.139226878778663, 11.189500807812907, 11.239649064591639, 11.287392883004792, 11.333886860196298, 11.379131005963043, 11.423125063524491, 11.465868555295767, 11.507360828090754, 11.547601097669315, 11.586588492535332, 11.624322096885864, 11.660800992605601, 11.696024300195942, 11.729991218523772, 11.76270106327171, 11.794153303969484, 11.825034823542365, 11.853941799209519, 11.881590855445305, 11.907982421824162, 11.933117242024078, 11.956996399767151, 11.979621342519723, 12.000993902851361, 12.021116317359365, 12.039991243073327, 12.057621771263456, 12.074011438585945, 12.089164235509298, 12.103084611976413, 12.115777480269005, 12.127500480908743, 12.137726703496144, 12.146743066677006, 12.154556314522443, 12.161173625184164, 12.166602596890897, 12.170851231257945, 12.173927913974644, 12.175841392945426, 12.176600753971151, 12.176215394067352, 12.174694992525321, 12.172049479830825, 12.168289004563029, 12.16342389840316, 12.157313118167547, 12.150245219688657, 12.14210465685362, 12.132902111027455, 12.122648247298654, 12.111353671139193, 12.099028884214611, 12.08568423950172, 12.071329895871745, 12.055975772296659, 12.039631501835954, 12.022306385560222, 12.004009346566804, 11.984748884241535, 11.964533028919211, 11.942865896126332, 11.920739442603809, 11.897678568885507, 11.873688973488228, 11.848775669467093, 11.822942944633098, 11.79619432320871, 11.768532529067443, 11.739959450703672, 11.710476108079783, 11.680082621498663, 11.648778182651021, 11.616561027988382, 11.583428414574431, 11.54937659856947, 11.513576388088744, 11.477649141258384, 11.440785110747907, 11.402976367439221, 11.364213918661427, 11.324487705895073, 11.283786606233285, 11.242098437759058, 11.199409968995084, 11.155706932578383, 11.110974043305717, 11.065195020688535, 11.018352616145966, 10.970428644953047, 10.921404023046712, 10.870079142833694, 10.818765787697641, 10.766289067374766, 10.712626752640753, 10.65775597560693, 10.601653296821258, 10.544294777322996, 10.485656055542137, 10.425712428896029, 10.364438939894875, 10.301810466525133, 10.237801816635622, 10.172387826005949, 10.105543459730956, 10.037243916509315, 9.965824164822086, 9.894506083809521, 9.821660362241648, 9.747264234206112, 9.671295717504313, 9.593733724309528, 9.514558170697049, 9.433750084354344, 9.351291709766038, 9.267166610162853, 9.181359765525496, 9.093857665944167, 9.004648399652618, 8.913721735081769, 8.821069196312846, 8.72446847367028, 8.628305671566185, 8.530402702752074, 8.430758763840938, 8.329375067756455, 8.226254869241707, 8.121403481006299, 8.014828280411962, 7.906538706679756, 7.796546248683937, 7.684864423479393, 7.57150874578873, 7.456496688750729, 7.339847636303512, 7.221582827641349, 7.098919154341589, 6.97745749358549, 6.854454895140295, 6.729939359138546, 6.6039403614147805, 6.476488762348243, 6.34761671211152, 6.217357553022394, 6.085745719692312, 5.952816637653001, 5.818606621124923, 5.683152770566075, 5.546492870610548, 5.40866528897082, 5.269708876839829, 5.126393339831292, 4.985273320592956, 4.843143887408026, 4.700044877268173, 4.5560161489224935, 4.411097501156782, 4.265328595075857, 4.118748880562354, 3.971397527042466, 3.823313358649653, 3.674534793839136, 3.525099789471261, 3.3750457893493166, 3.2244096771686674, 3.0732277338071334, 2.921535598863821, 2.7658240823669082, 2.6132058969949803, 2.460181038543581, 2.306782259733957, 2.1530415384996004, 1.998990062192476, 1.844658214963907, 1.690075568137054, 1.5352708733862777, 1.3802720585387895, 1.2251062258153524, 1.0697996523298698, 0.9143777926710719, 0.7588652833944316, 0.6032859492578275, 0.44404332699308213, 0.28839836706656996, 0.13275376036476416, -0.022869841609828967, -0.17845254689357049, -0.33397520947527326, -0.48941941494538455, -0.6447674654908546, -0.8000023643384928, -0.9551077997424393, -1.1100681286043859, -1.2648683598084887, -1.4194941373463799, -1.5739317233013708, -1.7281679807551562, -1.8857696302884328, -2.0395607475337947, -2.1931143010293397, -2.3464193994613325, -2.4994656673282236, -2.6522432284162782, -2.804742689498159, -2.95695512428016, -3.1088720576207116, -3.260485450039269, -3.4117876825323386, -3.562771541710106, -3.713430205265208, -3.8637572277827914, -4.0137465268987675, -4.166868375193513, -4.316157191096909, -4.465091967497713, -4.613667950026663, -4.761880683233226, -4.90972599889874, -5.057200004704622, -5.204299073252155, -5.351019831429554, -5.497359150121646, -5.643314134256531, -5.788882113183433, -5.934060631375395, -6.078847439450119, -6.223240485502107, -6.370581962864197, -6.514172819246085, -6.6573648275060044, -6.800156648703709, -6.942547102282688, -7.084535159119966, -7.2261199348342195, -7.3673006833446735, -7.508076790673162, -7.648447768981729, -7.788413250838463, -7.927972983704169, -8.067126824632599, -8.2058747351773, -8.344216776497962, -8.485356100744088, -8.622877536375153, -8.759993846536542, -8.896705447488909, -9.033012833300553, -9.168916572017295, -9.304417301987414, -9.439515728335977, -9.574212619583026, -9.708508804400289, -9.842405168501166, -9.975902651659133, -10.109002244849425, -10.241704987509607, -10.374011964914214, -10.50898734830643, -10.640497085729795, -10.771614592648362, -10.902341114385077, -11.032677930489118, -11.1626263527105, -11.292187723061023, -11.421363411958119, -11.550154816448359, -11.678563358507422, -11.806590483413437, -11.9342376581908, -12.061506370121652, -12.188398125322244, -12.314914447381586, -12.443985984656209, -12.569747434211997, -12.695138150128251, -12.820159713711348, -12.944813717758688, -13.069101765522571, -13.193025469720634, -13.316586451591018, -13.43978633999016, -13.562626770531807, -13.685109384765276, -13.80723582939147, -13.929007755515148, -14.05042681793174, -14.171494674447533, -14.295016242133169, -14.41537859856344, -14.53539477293393, -14.655066428921241, -14.774395230253926, -14.893382840205664, -15.012030921113162, -15.130341133917643, -15.248315137729012, -15.365954589411754, -15.483261143191609, -15.600236450282157, -15.716882158530527, -15.833199912081358, -15.9491913510583, -16.067544185883893, -16.18288040514275, -16.297895240896043, -16.41259031420098, -16.526967240733573, -16.641027630561037, -16.75477308792704, -16.868205211049318, -16.98132559192921, -17.094135816172358, -17.20663746282042, -17.31883210419306, -17.430721305739876, -17.542306625901848, -17.653589615981833, -17.767149235009125, -17.87782524862215, -17.98820357753939, -18.09828574320748, -18.208073259408526, -18.317567632177575, -18.42677035972665, -18.535682932375163, -18.644306832486404, -18.752643534409746, -18.860694504428434, -18.96846120071262, -19.075945073277456, -19.183147563945976, -19.290070106316566, -19.399190916640965, -19.505551402647132, -19.61163622420528, -19.71744678158115, -19.822984466714782, -19.928250663211404, -20.033246746335795, -20.137974083009556, -20.24243403181153, -20.346627942980927, -20.450557158423255, -20.55422301171873, -20.657626828133157, -20.76076992463111, -20.863653609891347, -20.96866276488905, -21.07102556343747, -21.173132857015137, -21.274985921160965, -21.37658602323477, -21.477934422443706, -21.57903236987021, -21.67988110850128, -21.780481873259287, -21.880835891033815, -21.980944380714906, -22.080808553227318, -22.180429611565852, -22.279808750831688, -22.378947158269686, -22.48014314582453, -22.578798090247613, -22.67721584480078, -22.77539756551437, -22.873344400761756, -22.9710574913011, -23.06853797031764, -23.165786963466562, -23.262805588916326, -23.359594957392456, -23.456156172221693, -23.55249032937665, -23.648598517520643, -23.74448181805293, -23.840141305154244, -23.937794863127923, -24.033004774317103, -24.12799407616451, -24.222763814273083, -24.317315027258967, -24.411648746797997, -24.505765997672444, -24.59966779781772, -24.693355158369148, -24.786829083708863, -24.880090571512564, -24.97314061279638, -25.06598019196368, -25.158610286851815, -25.251031868778913, -25.345387953233352, -25.4373906042894, -25.52918763975398, -25.620780005186926, -25.712168639862167, -25.803354476813812, -25.894338442882162, -25.985121458759483, -26.075704439035693, -26.166088292243817, -26.256273920905304, -26.346262221575206, -26.436054084886965, -26.525650395597292, -26.61505203263059, -26.706332171041975
];

const visualiser_type = localStorage.getItem("visualiser_type");
const canvas = document.getElementById("visualiser"); // Accesses canvas element in html
var ctx = canvas.getContext('2d'); // Creates a context to be able to draw on the canvas

if (visualiser_type == "intensity spectrum") {
    // Code block for drawing frequency intensity spectrum
    Chart.defaults.animation = false; // Makes sure that graph refreshes instantly
    var visualiser = new Chart(ctx, {
        type: 'line',  // Sets graph to line graph
        data: {
            labels: [
                43, 86, 129, 172, 215, 258, 301, 344, 387, 430, 473, 516, 559, 602, 645, 689, 732, 775, 818, 861, 904, 947, 990, 1033, 1076, 1119, 1162, 1205, 1248, 1291, 1335, 1378, 1421, 1464, 1507, 1550, 1593, 1636, 1679, 1722, 1765, 1808, 1851, 1894, 1937, 1981, 2024, 2067, 2110, 2153, 2196, 2239, 2282, 2325, 2368, 2411, 2454, 2497, 2540, 2583, 2627, 2670, 2713, 2756, 2799, 2842, 2885, 2928, 2971, 3014, 3057, 3100, 3143, 3186, 3229, 3273, 3316, 3359, 3402, 3445, 3488, 3531, 3574, 3617, 3660, 3703, 3746, 3789, 3832, 3875, 3919, 3962, 4005, 4048, 4091, 4134, 4177, 4220, 4263, 4306, 4349, 4392, 4435, 4478, 4521, 4565, 4608, 4651, 4694, 4737, 4780, 4823, 4866, 4909, 4952, 4995, 5038, 5081, 5124, 5167, 5211, 5254, 5297, 5340, 5383, 5426, 5469, 5512, 5555, 5598, 5641, 5684, 5727, 5770, 5813, 5857, 5900, 5943, 5986, 6029, 6072, 6115, 6158, 6201, 6244, 6287, 6330, 6373, 6416, 6459, 6503, 6546, 6589, 6632, 6675, 6718, 6761, 6804, 6847, 6890, 6933, 6976, 7019, 7062, 7105, 7149, 7192, 7235, 7278, 7321, 7364, 7407, 7450, 7493, 7536, 7579, 7622, 7665, 7708, 7751, 7795, 7838, 7881, 7924, 7967, 8010, 8053, 8096, 8139, 8182, 8225, 8268, 8311, 8354, 8397, 8441, 8484, 8527, 8570, 8613, 8656, 8699, 8742, 8785, 8828, 8871, 8914, 8957, 9000, 9043, 9087, 9130, 9173, 9216, 9259, 9302, 9345, 9388, 9431, 9474, 9517, 9560, 9603, 9646, 9689, 9733, 9776, 9819, 9862, 9905, 9948, 9991, 10034, 10077, 10120, 10163, 10206, 10249, 10292, 10335, 10379, 10422, 10465, 10508, 10551, 10594, 10637, 10680, 10723, 10766, 10809, 10852, 10895, 10938, 10981, 11025, 11068, 11111, 11154, 11197, 11240, 11283, 11326, 11369, 11412, 11455, 11498, 11541, 11584, 11627, 11670, 11714, 11757, 11800, 11843, 11886, 11929, 11972, 12015, 12058, 12101, 12144, 12187, 12230, 12273, 12316, 12360, 12403, 12446, 12489, 12532, 12575, 12618, 12661, 12704, 12747, 12790, 12833, 12876, 12919, 12962, 13006, 13049, 13092, 13135, 13178, 13221, 13264, 13307, 13350, 13393, 13436, 13479, 13522, 13565, 13608, 13652, 13695, 13738, 13781, 13824, 13867, 13910, 13953, 13996, 14039, 14082, 14125, 14168, 14211, 14254, 14298, 14341, 14384, 14427, 14470, 14513, 14556, 14599, 14642, 14685, 14728, 14771, 14814, 14857, 14900, 14944, 14987, 15030, 15073, 15116, 15159, 15202, 15245, 15288, 15331, 15374, 15417, 15460, 15503, 15546, 15590, 15633, 15676, 15719, 15762, 15805, 15848, 15891, 15934, 15977, 16020, 16063, 16106, 16149, 16192, 16236, 16279, 16322, 16365, 16408, 16451, 16494, 16537, 16580, 16623, 16666, 16709, 16752, 16795, 16838, 16882, 16925, 16968, 17011, 17054, 17097, 17140, 17183, 17226, 17269, 17312, 17355, 17398, 17441, 17484, 17528, 17571, 17614, 17657, 17700, 17743, 17786, 17829, 17872, 17915, 17958, 18001, 18044, 18087, 18130, 18174, 18217, 18260, 18303, 18346, 18389, 18432, 18475, 18518, 18561, 18604, 18647, 18690, 18733, 18776, 18820, 18863, 18906, 18949, 18992, 19035, 19078, 19121, 19164, 19207, 19250, 19293, 19336, 19379, 19422, 19466, 19509, 19552, 19595, 19638, 19681, 19724, 19767, 19810, 19853, 19896, 19939, 19982, 20025, 20068, 20112, 20155, 20198, 20241, 20284, 20327, 20370, 20413, 20456, 20499, 20542, 20585, 20628, 20671, 20714, 20758, 20801, 20844, 20887, 20930, 20973, 21016, 21059, 21102, 21145, 21188, 21231, 21274, 21317, 21360, 21404, 21447, 21490, 21533, 21576, 21619, 21662, 21705, 21748, 21791, 21834, 21877, 21920, 21963, 22006, 22050
            ], // List of frequency bins
            datasets: [{
                label: 'Data Points',
                data: [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ], // Decibel values for each frequency bin
                backgroundColor: 'rgba(255, 255, 255, 0)',
                borderColor: localStorage.getItem("intensity_spectrum_colour"),
                borderWidth: 1.5, // Make the line thicker
                pointRadius: 0, // Remove the circle markers
                fill: true
            }]
        },
        options: {
            maintainAspectRatio: false, // Allow the aspect ratio to be overridden
            plugins: {
                tooltip: {
                    enabled: false // Disable tooltips
                },
                legend: {
                    display: false,
                },
            },
            scales: {
                x: {
                    type: localStorage.getItem("intensity_spectrum_axis"),
                    position: 'bottom',
                    ticks: {
                        callback: function(value, index, values) { // Displays X axis labels from custom pushed ticks

                            const customLabels = {
                                100: '100',
                                500: '500',
                                1000: '1k',
                                2000: '2k',
                                4000: '4k',
                                8000: '8k',
                                16000: '16k'
                            };

                            return customLabels[value] || '';
                        },
                    },
                    afterBuildTicks: function(axis) {

                        // Clear all pregenerated ticks
                        axis.ticks = [];

                        // Manually push only wanted ticks (essentially the vertical grid lines):                        

                        // Iterate over the array and add ticks
                        if (localStorage.getItem("intensity_spectrum_axis") == "logarithmic") {
                            const tickValues = [
                                { value: 100, major: true },
                                { value: 200, major: false },
                                { value: 300, major: false },
                                { value: 400, major: false },
                                { value: 500, major: true },
                                { value: 600, major: false },
                                { value: 700, major: false },
                                { value: 800, major: false },
                                { value: 900, major: false },
                                { value: 1000, major: true },
                                { value: 2000, major: true },
                                { value: 3000, major: false },
                                { value: 4000, major: true },
                                { value: 5000, major: false },
                                { value: 6000, major: false },
                                { value: 7000, major: false },
                                { value: 8000, major: true },
                                { value: 9000, major: false },
                                { value: 10000, major: false },
                                { value: 16000, major: true },
                                { value: 20000, major: false }
                            ];
                            for (let i = 0; i < tickValues.length; i++) {
                                axis.ticks.push({
                                    value: tickValues[i].value,
                                    major: tickValues[i].major,
                                });
                            };
                        }
                        else if (localStorage.getItem("intensity_spectrum_axis") == "linear") {
                            const tickValues = [
                                { value: 100, major: true },
                                { value: 1000, major: true },
                                { value: 2000, major: true },
                                { value: 3000, major: false },
                                { value: 4000, major: true },
                                { value: 5000, major: false },
                                { value: 6000, major: false },
                                { value: 7000, major: false },
                                { value: 8000, major: true },
                                { value: 9000, major: false },
                                { value: 10000, major: false },
                                { value: 16000, major: true },
                                { value: 20000, major: false }
                            ];
                            for (let i = 0; i < tickValues.length; i++) {
                                axis.ticks.push({
                                    value: tickValues[i].value,
                                    major: tickValues[i].major,
                                });
                            };
                        };
                        
                    },

                    
                    min: 100, // Set the minimum value for the x-axis
                    max: 22050, // Set the maximum value for the x-axis
                    grid: {
                        color: 'rgba(0, 0, 0, 0.3)',
                        borderColor: '#333',
                        borderWidth: 1,
                        lineWidth: 1
                    },
                    title: {
                        display: false,
                    }
                },
                y: {
                    min: -40,    // Minimum value of the Y-axis
                    max: 120,    // Maximum value of the Y-axis
                    grid: {
                        color: 'rgba(0, 0, 0, 0.5)', // Adjust the color and opacity
                        borderColor: '#333',
                        borderWidth: 1,
                        lineWidth: 2
                    },
                    title: {
                        display: false,
                    }
                }
            }
        }
    });
}
else if (visualiser_type == "spectrogram") {
    if (spectrogram_colour == "blue-red-white") {
        visualiser_container.style.backgroundColor = "rgb(0,0,100)";
        canvas.style.backgroundColor = "rgb(0,0,100)";
    }
    else if (spectrogram_colour == "purple-orange") {
        visualiser_container.style.backgroundColor = "rgb(35,0,100)";
        canvas.style.backgroundColor = "rgb(35,0,100)";
    }
    else if (spectrogram_colour == "red-blue-green") {
        visualiser_container.style.backgroundColor = "rgb(0,0,0)";
        canvas.style.backgroundColor = "rgb(0,0,0)";
    }
    else if (spectrogram_colour == "red-green") {
        visualiser_container.style.backgroundColor = "rgb(0,0,0)";
        canvas.style.backgroundColor = "rgb(0,0,0)";
    }
    else if (spectrogram_colour == "black-white") {
        visualiser_container.style.backgroundColor = "rgb(0,0,0)";
        canvas.style.backgroundColor = "rgb(0,0,0)";
    };
    
    spectrogram_axis.style.display = "block"
    canvas.style.margin = "0px";
    canvas.style.marginTop = "20px";

    if (spectrogram_refresh == 3) {
        spectrogram_axis.src = "icons/spectrogram_axis/axis_3.svg"
    } 
    else if (spectrogram_refresh == 5) {
        spectrogram_axis.src = "icons/spectrogram_axis/axis_5.svg"
    }
    else if (spectrogram_refresh == 10) {
        spectrogram_axis.src = "icons/spectrogram_axis/axis_10.svg"
    };

    spectrogram_resize();
}
else if (visualiser_type == "waveform") {
    // Code block for drawing waveform
    Chart.defaults.animation = false; // Makes sure that graph refreshes instantly
    var visualiser = new Chart(ctx, {
        type: 'line',  // Sets graph to line graph
        data: {
            labels: [
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512
            ], // List of frequency bins
            datasets: [{
                label: 'Data Points',
                data: [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ], // Decibel values for each frequency bin
                backgroundColor: 'rgba(255, 255, 255, 0)',
                borderColor: localStorage.getItem("waveform_colour"),
                borderWidth: 1.5, // Make the line thicker
                pointRadius: 0, // Remove the circle markers
                fill: true
            }]
        },
        options: {
            maintainAspectRatio: false, // Allow the aspect ratio to be overridden
            plugins: {
                tooltip: {
                    enabled: false // Disable tooltips
                },
                legend: {
                    display: false,
                },
            },
            scales: {
                x: {
                    type: "linear",
                    position: 'bottom',
                    ticks: {},
                    afterBuildTicks: function(axis) {
                        // Clear all pregenerated ticks
                        axis.ticks = [];                        
                    },

                    min: 1, // Set the minimum value for the x-axis
                    max: 512, // Set the maximum value for the x-axis
                    grid: {
                        color: 'rgba(0, 0, 0, 0.3)',
                        borderColor: '#333',
                        borderWidth: 1,
                        lineWidth: 1
                    },
                    title: {
                        display: false,
                    }
                },
                y: {
                    min: -1,    // Minimum value of the Y-axis
                    max: 1,    // Maximum value of the Y-axis
                    grid: {
                        color: 'rgba(0, 0, 0, 0.5)', // Adjust the color and opacity
                        borderColor: '#333',
                        borderWidth: 1,
                        lineWidth: 0
                    },
                    title: {
                        display: false,
                    }
                }
            }
        }
    });
}
else if (visualiser_type == "softmax") {
    // Code block for drawing frequency intensity spectrum
    Chart.defaults.animation = false; // Makes sure that graph refreshes instantly
    var visualiser = new Chart(ctx, {
        type: 'bar',  // Sets graph to bar graph
        data: {
            labels: [
                43, 86, 129, 172, 215, 258, 301, 344, 387, 430, 473, 516, 559, 602, 645, 689, 732, 775, 818, 861, 904, 947, 990, 1033, 1076, 1119, 1162, 1205, 1248, 1291, 1335, 1378, 1421, 1464, 1507, 1550, 1593, 1636, 1679, 1722, 1765, 1808, 1851, 1894, 1937, 1981, 2024, 2067, 2110, 2153, 2196, 2239, 2282, 2325, 2368, 2411, 2454, 2497, 2540, 2583, 2627, 2670, 2713, 2756, 2799, 2842, 2885, 2928, 2971, 3014, 3057, 3100, 3143, 3186, 3229, 3273, 3316, 3359, 3402, 3445, 3488, 3531, 3574, 3617, 3660, 3703, 3746, 3789, 3832, 3875, 3919, 3962, 4005, 4048, 4091, 4134, 4177, 4220, 4263, 4306, 4349, 4392, 4435, 4478, 4521, 4565, 4608, 4651, 4694, 4737, 4780, 4823, 4866, 4909, 4952, 4995, 5038, 5081, 5124, 5167, 5211, 5254, 5297, 5340, 5383, 5426, 5469, 5512, 5555, 5598, 5641, 5684, 5727, 5770, 5813, 5857, 5900, 5943, 5986, 6029, 6072, 6115, 6158, 6201, 6244, 6287, 6330, 6373, 6416, 6459, 6503, 6546, 6589, 6632, 6675, 6718, 6761, 6804, 6847, 6890, 6933, 6976, 7019, 7062, 7105, 7149, 7192, 7235, 7278, 7321, 7364, 7407, 7450, 7493, 7536, 7579, 7622, 7665, 7708, 7751, 7795, 7838, 7881, 7924, 7967, 8010, 8053, 8096, 8139, 8182, 8225, 8268, 8311, 8354, 8397, 8441, 8484, 8527, 8570, 8613, 8656, 8699, 8742, 8785, 8828, 8871, 8914, 8957, 9000, 9043, 9087, 9130, 9173, 9216, 9259, 9302, 9345, 9388, 9431, 9474, 9517, 9560, 9603, 9646, 9689, 9733, 9776, 9819, 9862, 9905, 9948, 9991, 10034, 10077, 10120, 10163, 10206, 10249, 10292, 10335, 10379, 10422, 10465, 10508, 10551, 10594, 10637, 10680, 10723, 10766, 10809, 10852, 10895, 10938, 10981, 11025, 11068, 11111, 11154, 11197, 11240, 11283, 11326, 11369, 11412, 11455, 11498, 11541, 11584, 11627, 11670, 11714, 11757, 11800, 11843, 11886, 11929, 11972, 12015, 12058, 12101, 12144, 12187, 12230, 12273, 12316, 12360, 12403, 12446, 12489, 12532, 12575, 12618, 12661, 12704, 12747, 12790, 12833, 12876, 12919, 12962, 13006, 13049, 13092, 13135, 13178, 13221, 13264, 13307, 13350, 13393, 13436, 13479, 13522, 13565, 13608, 13652, 13695, 13738, 13781, 13824, 13867, 13910, 13953, 13996, 14039, 14082, 14125, 14168, 14211, 14254, 14298, 14341, 14384, 14427, 14470, 14513, 14556, 14599, 14642, 14685, 14728, 14771, 14814, 14857, 14900, 14944, 14987, 15030, 15073, 15116, 15159, 15202, 15245, 15288, 15331, 15374, 15417, 15460, 15503, 15546, 15590, 15633, 15676, 15719, 15762, 15805, 15848, 15891, 15934, 15977, 16020, 16063, 16106, 16149, 16192, 16236, 16279, 16322, 16365, 16408, 16451, 16494, 16537, 16580, 16623, 16666, 16709, 16752, 16795, 16838, 16882, 16925, 16968, 17011, 17054, 17097, 17140, 17183, 17226, 17269, 17312, 17355, 17398, 17441, 17484, 17528, 17571, 17614, 17657, 17700, 17743, 17786, 17829, 17872, 17915, 17958, 18001, 18044, 18087, 18130, 18174, 18217, 18260, 18303, 18346, 18389, 18432, 18475, 18518, 18561, 18604, 18647, 18690, 18733, 18776, 18820, 18863, 18906, 18949, 18992, 19035, 19078, 19121, 19164, 19207, 19250, 19293, 19336, 19379, 19422, 19466, 19509, 19552, 19595, 19638, 19681, 19724, 19767, 19810, 19853, 19896, 19939, 19982, 20025, 20068, 20112, 20155, 20198, 20241, 20284, 20327, 20370, 20413, 20456, 20499, 20542, 20585, 20628, 20671, 20714, 20758, 20801, 20844, 20887, 20930, 20973, 21016, 21059, 21102, 21145, 21188, 21231, 21274, 21317, 21360, 21404, 21447, 21490, 21533, 21576, 21619, 21662, 21705, 21748, 21791, 21834, 21877, 21920, 21963, 22006, 22050
            ], // List of frequency bins
            datasets: [{
                label: 'Data Points',
                data: [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                ], // Decibel values for each frequency bin
                backgroundColor: 'rgba(255, 255, 255, 0)',
                borderColor: localStorage.getItem("softmax_colour"),
                borderWidth: 1.5, // Make the line thicker
                pointRadius: 0, // Remove the circle markers
                fill: true
            }]
        },
        options: {
            maintainAspectRatio: false, // Allow the aspect ratio to be overridden
            plugins: {
                tooltip: {
                    enabled: false // Disable tooltips
                },
                legend: {
                    display: false,
                },
            },
            scales: {
                x: {
                    type: localStorage.getItem("softmax_axis"),
                    position: 'bottom',
                    ticks: {
                        callback: function(value, index, values) { // Displays X axis labels from custom pushed ticks

                            const customLabels = {
                                100: '100',
                                500: '500',
                                1000: '1k',
                                2000: '2k',
                                4000: '4k',
                                8000: '8k',
                                16000: '16k'
                            };

                            return customLabels[value] || '';
                        },
                    },
                    afterBuildTicks: function(axis) {

                        // Clear all pregenerated ticks
                        axis.ticks = [];

                        // Manually push only wanted ticks (essentially the vertical grid lines):                        

                        // Iterate over the array and add ticks
                        if (localStorage.getItem("softmax_axis") == "logarithmic") {
                            const tickValues = [
                                { value: 100, major: true },
                                { value: 200, major: false },
                                { value: 300, major: false },
                                { value: 400, major: false },
                                { value: 500, major: true },
                                { value: 600, major: false },
                                { value: 700, major: false },
                                { value: 800, major: false },
                                { value: 900, major: false },
                                { value: 1000, major: true },
                                { value: 2000, major: true },
                                { value: 3000, major: false },
                                { value: 4000, major: true },
                                { value: 5000, major: false },
                                { value: 6000, major: false },
                                { value: 7000, major: false },
                                { value: 8000, major: true },
                                { value: 9000, major: false },
                                { value: 10000, major: false },
                                { value: 16000, major: true },
                                { value: 20000, major: false }
                            ];
                            for (let i = 0; i < tickValues.length; i++) {
                                axis.ticks.push({
                                    value: tickValues[i].value,
                                    major: tickValues[i].major,
                                });
                            };
                        }
                        else if (localStorage.getItem("softmax_axis") == "linear") {
                            const tickValues = [
                                { value: 100, major: true },
                                { value: 1000, major: true },
                                { value: 2000, major: true },
                                { value: 3000, major: false },
                                { value: 4000, major: true },
                                { value: 5000, major: false },
                                { value: 6000, major: false },
                                { value: 7000, major: false },
                                { value: 8000, major: true },
                                { value: 9000, major: false },
                                { value: 10000, major: false },
                                { value: 16000, major: true },
                                { value: 20000, major: false }
                            ];
                            for (let i = 0; i < tickValues.length; i++) {
                                axis.ticks.push({
                                    value: tickValues[i].value,
                                    major: tickValues[i].major,
                                });
                            };
                        };
                        
                    },

                    
                    min: 100, // Set the minimum value for the x-axis
                    max: 22050, // Set the maximum value for the x-axis
                    grid: {
                        color: 'rgba(0, 0, 0, 0.3)',
                        borderColor: '#333',
                        borderWidth: 1,
                        lineWidth: 1
                    },
                    title: {
                        display: false,
                    },
                    barPercentage: 1.0, // Set bar width to take full category width
                    categoryPercentage: 1.0 // Remove spacing between categories
                },
                y: {
                    min: 0,    // Minimum value of the Y-axis
                    max: 1,    // Maximum value of the Y-axis
                    grid: {
                        color: 'rgba(0, 0, 0, 0.5)', // Adjust the color and opacity
                        borderColor: '#333',
                        borderWidth: 1,
                        lineWidth: 2
                    },
                    title: {
                        display: false,
                    }
                }
            }
        }
    });
};

function spectrogram_resize() {

    let height = visualiser_container.offsetHeight;
    let width = visualiser_container.offsetWidth;

    canvas.style.height = `${height * 0.85}px`;
    canvas.style.width = `${width * 0.95}px`;

    spectrogram_axis.style.width = `${width * 0.95}px`;
};
window.addEventListener("resize",spectrogram_resize);

function update_spectrogram() {

    let array = normalize_data(Decibels);

    ctx.drawImage(canvas, -10, 0);

    const width = 10;  // Width of the new image slice
    const height = 512;  // Height of the image
    const imageData = ctx.createImageData(width, height);

    for (let x = 0; x < width; x++) {
        for (let y = 0; y < height; y++) {
            var index = y * width + x;
            var intensity = array[height - y - 1];  // Keep using the same intensity for all x at the same y

            if (spectrogram_colour == "blue-red-white") {
                // Blue- Red - White
                imageData.data[index * 4] = intensity * 255;                            // Red
                imageData.data[index * 4 + 1] = (intensity ** 3) * 255;                 // Green
                imageData.data[index * 4 + 2] = ((intensity) ** 10) * 150 + 100;        // Blue
                imageData.data[index * 4 + 3] = 255;                                    // Alpha
            }
            else if (spectrogram_colour == "purple-orange") {
                // Purple - Orange
                imageData.data[index * 4] = intensity * 220 + 35;                       // Red
                imageData.data[index * 4 + 1] = intensity * 150;                        // Green
                imageData.data[index * 4 + 2] = (1 - intensity) * 50 + 50;              // Blue
                imageData.data[index * 4 + 3] = 255;                                    // Alpha
            }
            else if (spectrogram_colour == "red-blue-green") {
                // Red - Blue - Green
                imageData.data[index * 4] = -1500 * ((intensity - 0.40) ** 2) + 200     // Red
                imageData.data[index * 4 + 1] = -1000 * ((intensity - 1) ** 2) + 255;   // Green
                imageData.data[index * 4 + 2] = -1000 * ((intensity - 0.7) ** 2) + 200; // Blue
                imageData.data[index * 4 + 3] = 255;                                    // Alpha
            }
            else if (spectrogram_colour == "red-green") {
                // Red - Green
                imageData.data[index * 4] = -1500 * ((intensity - 0.40) ** 2) + 200     // Red
                imageData.data[index * 4 + 1] = -1000 * ((intensity - 1) ** 2) + 255;   // Green
                imageData.data[index * 4 + 2] = 0;                                      // Blue
                imageData.data[index * 4 + 3] = 255;                                    // Alpha
            }
            else if (spectrogram_colour == "black-white") {
                // Black - White
                imageData.data[index * 4] = intensity * 255;                            // Red
                imageData.data[index * 4 + 1] = intensity * 255;                        // Green
                imageData.data[index * 4 + 2] = intensity * 255;                        // Blue
                imageData.data[index * 4 + 3] = 255;                                    // Alpha
            }
        };
    };

    // Draw the new slice on the right side of the canvas
    ctx.putImageData(imageData, canvas.width - width, 0);
};

// ------------------------------------------------------------------------------------------------------------------

const audioContext = new (window.AudioContext || window.AudioContext)();
const analyser = audioContext.createAnalyser();

analyser.fftSize = 1024; // Array length = fftSize / 2, ie. 512
analyser.smoothingTimeConstant = 0.25; 
// smoothingTimeConstant => 0 = less smoothing (decreased latency)   
// smoothingTimeConstant => 1 = more smoothing (increased latency)

async function connect_microphone() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaStream = stream; // Assign the stream to mediaStream

        // Connect the stream to the audio context
        const source = audioContext.createMediaStreamSource(stream);
        source.connect(analyser);

        // Create a Float32Array to hold the frequency data
        const bufferLength = analyser.frequencyBinCount;
        Data = new Float32Array(bufferLength);

        console.log("Successfully connected to microphone");

        if (audioContext.state === 'suspended') {
            audioContext.resume();
        };
    }
    catch (err) {
        console.error("Error accessing the microphone: ", err);
        throw err; // Rethrow the error so it can be caught later
    };
};

function capture_audio_data() {
    // Get the frequency data from the analyser
    if (visualiser_type == "intensity spectrum" || visualiser_type == "spectrogram" || visualiser_type == "softmax") {
        analyser.getFloatFrequencyData(Data); // Gets array of intensity values over given frequency interval (~ 43hz)
        Decibels = Data.map(value => value + 120 + calibration); // Adjust the data and save in Decibels Array
        // 120 is an arbitrary number which represents the maximum audio level (depends on the microphone response)
    }
    else if (visualiser_type == "waveform") {
        analyser.getFloatTimeDomainData(Data); // Gets array of amplitude values over given time interval (~ 0.0023ms)
        Amplitudes = Data.map(value => value); // Save data in Amplitudes array

        analyser.getFloatFrequencyData(Data); // Gets array of intensity values over given frequency interval (~ 43hz)
        Decibels = Data.map(value => value + 120 + calibration); // Adjust the data and save in Decibels Array        
        // 120 is an arbitrary number which represents the maximum audio level (depends on the microphone response)
    };

    apply_weighting(); // Applies any weighting selected
    apply_smoothing(); // Applies any smoothing function selected

    if (visualiser_type == "intensity spectrum" || visualiser_type == "spectrogram") {
        calc_average(); // Calculates average current sound level (to be used for VU meter)

        update_meter_display(average) // Updates VU meter showing average current sound level
        update_decibels_display(Decibels); // Updates all decibel meter displays (max, avg and current)
        update_visualiser(Decibels); // Updates the visualiser
    }
    else if (visualiser_type == "waveform") { // Normalises Decibels to be between 0 and 1, then exponentiates

        calc_average(); // Calculates average current sound level (to be used for VU meter)

        update_meter_display(average) // Updates VU meter showing average current sound level
        update_decibels_display(Decibels); // Updates all decibel meter displays (max, avg and current)

        update_visualiser(Amplitudes); // Updates the visualiser
    }
    else if (visualiser_type == "softmax") { // Normalises Decibels to be between 0 and 1, then exponentiates

        calc_average(); // Calculates average current sound level (to be used for VU meter)

        update_meter_display(average) // Updates VU meter showing average current sound level
        update_decibels_display(Decibels); // Updates all decibel meter displays (max, avg and current)

        Decibels = normalize_data(Decibels);
        update_visualiser(Decibels); // Updates the visualiser
    };

    save_data_txt(Decibels); // Updates/saves data to save_data array
    runtime += 100; // Counts up to keep track of runtime (ms)
};

function calc_average() {

    let sum = 0;
    let valid_count = 0;

    // console.log(Decibels);
    
    for (let i = 0; i < Decibels.length; i++) {

        if (Decibels[i] > 0) { // Checks for values less than 0dB and ignores 
            let value = Math.pow(10, Decibels[i] / 10); // Converts decibels to linear scale
            sum += value; // Sums all values in array
            valid_count += 1;
        };

    };

    average = sum / valid_count; // Calculates mean average of array

    average = Math.log10(average) * 10; // Converts back into decibel scale

    if (isNaN(average)) { // Checks for edge case where tries to divide 0 by 0 and returns NaN (happens when all Decibel values are negative)
        average = 0
    };

    average = parseFloat(average); // Makes sure to return a number
    average = average.toFixed(1); // Returns float to 1 decimal place

};

// Stores normalised intensity data
function normalize_data(Decibels) {
    if (visualiser_type == "spectrogram") {
        normalized_data_array = Decibels.map(value => 1 / (1 + (2.718 ** (-0.05 * (value - 40))))); // Sigmoid function for spectrogram
        return(normalized_data_array);
    }
    else if (visualiser_type == "softmax") {
        for (let i = 0; i < Decibels.length; i++) { // Makes any value less than 0, equal to 0
            if (Decibels[i] < 0) {
                Decibels[i] = 0
            };
        };
        let min = Math.min.apply(Math, Decibels);
        let max = Math.max.apply(Math, Decibels);    
        
        normalized_data_array = Decibels.map(value => (value - min) / (max - min)); // Normalises the dataset to be between 0 and 1

        for (let i = 0; i < Decibels.length; i++) { // For some reason I Decibels.map() doesn't work so we're using a for loop to exponentiate each value
            normalized_data_array[i] = normalized_data_array[i] ** 8;
        };
       
        return(normalized_data_array);
    };
};

function Play() {
    if (!mediaStream) { // Check if the microphone is not connected
        connect_microphone().then(() => {
            // After successfully connecting, start the interval
            if (!capture_interval_id) { // Only set a new interval if one is not already running
                capture_interval_id = setInterval(capture_audio_data, refresh_interval); // refresh_interval
            }
        }).catch(err => {
            console.error("Failed to connect to the microphone.");
        });
    } else {
        // If already connected, start capturing audio
        if (!capture_interval_id) {
            capture_interval_id = setInterval(capture_audio_data, refresh_interval);
        }
    }
};

function Pause() {
    // Clear the interval using the stored interval ID
    if (capture_interval_id) {
        clearInterval(capture_interval_id);
        capture_interval_id = null; // Reset the interval ID
    }
};

let is_playing = false; // Toggle between currently playing or paused
function toggle_play() {
    if (is_playing == false) {
        is_playing = true
        play_pause.src = "icons/pause.svg"
        Play()
    }
    else if (is_playing == true) {
        is_playing = false
        play_pause.src = "icons/play.svg"
        Pause()
    }
};
play.addEventListener("click", toggle_play);
window.addEventListener("keydown", function(key) { // Event listener to call toggle_play() whenever the spacebar is pressed
    // Check if the pressed key is the spacebar
    if (key.code === "Space") {
        
        key.preventDefault(); // Prevent the default action (e.g., scrolling the page)
        toggle_play(); // Call the toggle_play() function
    };
});

// Applies weighting to each frequency interval (A, Z, ITU-R-468)
function apply_weighting() {

    if (visualiser_type != "waveform") {
        if (w == "itu r") {
            array = Decibels
            Decibels = array.map((value, index) => value + ITUR_weight[index])
            array = []
        }
        else if (w == "a") {
            array = Decibels
            Decibels = array.map((value, index) => value + A_weight[index])
            array = []
        }
        else if (w == "c") {
            // C weighting to be added
        } 
        // else if { apply 'zero' weighting }
    };     
};

// Applies smoothing function to the Decibels array (raw, savitzky-golay)
function apply_smoothing() {

    if (visualiser_type != "waveform") {
        if (smoothing == "savitzky-golay") {
            Decibels = savitzky_golay(Decibels);
        }
        else {
            // Apply no smoothing
        };
    };
};

// Calculates the savitzky-golay smoothing filter for the Decibels array
function savitzky_golay(Data) {
    const window_size = 9;
    const half_window = Math.floor(window_size / 2);
    const order = 2;
    let matrix = [];
    let smoothed_data = [];

    // Calculates filter coefficients using least squares fitting

    // Create the Vandermonde matrix (basis polynomials)
    for (let i = -half_window; i <= half_window; i++) {
        let row = [];

        for (let j = 0; j <= order; j++) {
            row.push(Math.pow(i, j));
        };

        matrix.push(row);
    };

    console.log(`half = ${half_window}`);
    
    // Calculate pseudo-inverse of the matrix
    //! A+ = (A^T A)^-1 A^T
    let pseudo_inverse_matrix = numeric.dot(numeric.transpose(matrix), matrix);
    // console.log("matrix =");
    // console.log(matrix);
    // console.log("pseudo-inv =");
    // console.log(pseudo_inverse_matrix);

    pseudo_inverse_matrix = numeric.inv(pseudo_inverse_matrix);
    // console.log("pseudo-inv =");
    // console.log(pseudo_inverse_matrix);

    pseudo_inverse_matrix = numeric.dot(pseudo_inverse_matrix, numeric.transpose(matrix));
    // console.log("pseudo-inv =");
    // console.log(pseudo_inverse_matrix);
    
    const coefficients = pseudo_inverse_matrix[0];
    // console.log(`coefficients = ${coefficients}`);

    // Applies smoothing to Decibels array
    
    for (let i = 0; i < Data.length; i++) {
        let result = 0;
    
        // Convolve the window with the coefficients
        for (let j = -half_window; j <= half_window; j++) {
            let dataIndex = i + j;
            // console.log(`i = ${i}`);
            // console.log(`j = ${j}`);
            // console.log(`dataIndex = ${dataIndex}`);

            if (dataIndex < 0 || dataIndex >= Data.length) {

                // Handle out-of-bounds indices (e.g., extend the edge values)
                dataIndex = Math.max(0, Math.min(Data.length - 1, dataIndex));
            };
            // console.log(`coefficients = ${coefficients}`);
            // console.log(`Data = ${Data}`);

            result += Data[dataIndex] * coefficients[j + half_window];
            // console.log(`result = ${result}`);  
        };
        smoothed_data.push(result);
    };
    // console.log(Decibels);
    // console.log(smoothed_data);

    return smoothed_data;
};

let counter = 0 // Counter for visualiser timing
// Updates data in the visualiser (graph, spectrogram, etc.)
function update_visualiser(dataset) {

    if (visualiser_type == "intensity spectrum") {
        visualiser.data.datasets[0].data = dataset
        visualiser.update(); // Redraw the chart with updated data
    }
    else if (visualiser_type == "spectrogram") {
        if (counter == 0) {
            update_spectrogram()
            counter += 1
        }
        else {
            counter += 1
        };
        if (counter >= spectrogram_refresh) {
            counter = 0
        };
    }
    else if (visualiser_type == "waveform") {
        visualiser.data.datasets[0].data = dataset
        visualiser.update(); // Redraw the chart with updated data
    }
    else if (visualiser_type == "softmax") {
        visualiser.data.datasets[0].data = dataset
        visualiser.update(); // Redraw the chart with updated data
    };
};

let width = 0;
// Calculates width of meter display
function calc_meter_width() {
    
    width = document.body.clientWidth * 0.2;
    
};
// Recalculates width of the meter display when ever window gets refreshed or resized
window.onload = calc_meter_width; 
window.onresize = calc_meter_width; 

// Updates the VU meter showing average sound level
function update_meter_display(average) {
    
    if (average <= 0) {
        meter_arrow.style.left = "0.8vw"
    }
    else if (average >= 100) {
        meter_arrow.style.left = "18.8vw"
    }
    else {
        x = 0.182 * average
        meter_arrow.style.left = `${x + 0.6}vw`
    };
}; 

// Updates the display showing sound level, maximum and average maximum
function update_decibels_display(Decibels) {
    let num;

    if (display_type == "max") {
        num = Math.max.apply(Math, Decibels); // Finds the highest value in the Decibels array
        num = parseFloat(num); // Makes sure to return a number
        num = num.toFixed(1); // Returns float to 1 decimal place
        decibels_display.innerText = num;
    }
    else {
        decibels_display.innerText = average;
    };

    if (parseFloat(decibels_display.innerText) >= maximum) { // Only updates display if current maximum is exceeded
        maximum = decibels_display.innerText
        max_display.innerText = maximum        
    };

    maximum_sum += parseFloat(decibels_display.innerText);
    maximum_counter += 1;
    num = maximum_sum / maximum_counter;
    num = parseFloat(num);
    num = num.toFixed(1);
    avg_display.innerText = num;
};

// Saves the Decibels array data into a dedicated array
function save_data_txt(dataset) {
    const download_type = localStorage.getItem("download_type");

    if (download_type == "full") { // Saves every recorded Decibels array 
        full_save_data.push(dataset);
    };

    simple_save_data = [`Maximum: ${max_display.innerText}`,`Average: ${avg_display.innerText}`,`Runtime: ${runtime}ms`,"",];
};

const download_button = document.getElementById("download");
// Creates a .txt file to save the Decibels data and then downloads it
function download_data_txt(dataset_simple, dataset_full) {

    if (dataset_simple.length === 0 && dataset_full.length === 0) {
        console.log("Dataset is empty, nothing to download.");
        alert("No data to download")
        return; // Exit the function if the dataset is empty
    };
    let temp_array = [];

    // Content formatting for download
    for (let i = 0; i < dataset_simple.length; i++) {
        temp_array.push(dataset_simple[i]);
    };
    temp_array.push("\n");
    for (let i = 0; i < dataset_full.length; i++) {
        temp_array.push(dataset_full[i]);
        temp_array.push("\n");
    };

    const content = (temp_array.join("\n")); // Convert the dataset to a string, putting each item on a new line

    const blob = new Blob([content], { type: "text/plain" }); // Create a Blob with the content

    const download_link = document.createElement("a"); // Create a link element

    download_link.href = URL.createObjectURL(blob); // Set the href to the Blob URL
    download_link.download = "data.txt"; // Set the download attribute to specify the file name
    download_link.click(); // Programmatically click the link to trigger the download

    URL.revokeObjectURL(download_link.href); // Revoke the Blob URL to free up memory

    console.log("Data downloaded");
};
download_button.onclick = function() { download_data_txt(simple_save_data, full_save_data); };

const calibrationSlider = document.getElementById('calibration_slider');
// Calibrates the sound level by increasing or decreasing decibels (linear calibration)
calibrationSlider.addEventListener('input', function() {
    calibration = parseFloat(calibrationSlider.value); // Get the slider value and convert it to a number
    
    if (calibration < 0) {
        calibration_display.innerText = `- ${Math.abs(calibration).toFixed(1)}`;
    } else {
        calibration_display.innerText = `+ ${calibration.toFixed(1)}`;
    }
});





//TODO          Add settings for:
//TODO                              changing refresh rate of decibels display 
//                                  spectrogram colours
//                                  spectrogram refresh rate
//                                  waveform line colour
//TODO                              softmax line colour
//TODO                              softmax settings
//?                                 intensity spectrum data visualisation type (raw or smoothed) (add more smoothing options)
//                                  download type (simple, full)

//?             Add smoothing function to Decibels array (add more smoothing options)
//TODO          Add option to create custom frequency weighting/frequency response (using octave 1/1 and 1/3 method)
//              Add Spectrogram visualisation
//              Add Waveform visualisation
//              Add softmax visualisation
//              Add correct decibel and VU meter display for when waveform and softmax is selected
//              Allow downloading of data
//              Event listener for spacebar play toggle

//TODO          Link main page to portfolio website